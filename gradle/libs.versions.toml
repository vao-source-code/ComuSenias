[versions]
accompanistPermissions = "0.33.1-alpha"
core = "1.10.1"
activityCompose = "1.7.2"
composeBom = "2022.10.00"
gradleDownloadTask = "5.5.0"
mockK = "1.12.0"
playServicesTfliteGpu = "16.1.0"
robolectric = "4.9"
lifecycle = "2.5.1"
glide = "4.11.0"
daggerHilt = "2.44"
daggerHiltVerion = "2.44"
navigationHilt = "1.0.0"
navigation = "2.5.3"
kotlinXCoroutines = "1.6.4"
retrofit = "2.9.0"
converterGson = "2.6.4"
loggingInterceptor = "4.9.3"
firebaseAuth = "21.1.0"
firebaseBom = "32.2.0"
jUnit = "4.13.2"
espresso = "3.5.1"
junitExt = "1.1.5"
kotlinBom = "1.8.0"
androidApplication = "8.0.2"
kotlinAndroid = "1.7.20"
kotlinJvm = "1.6.10"
googleServices = "4.3.15"
camerax_version = "1.2.1"
tensorflowLite = "0.0.0-nightly"
tensorflowLiteGpu = "2.9.0"
tensorflowLiteTaskVision = "0.4.0"
tensorflowLiteTaskVisionPlayServices = "0.4.2"


[libraries]
accompanist-permissions = { module = "com.google.accompanist:accompanist-permissions", version.ref = "accompanistPermissions" }
core-ktx = { module = "androidx.core:core-ktx", version.ref = "core" }
gradle-download-task = { module = "de.undercouch:gradle-download-task", version.ref = "gradleDownloadTask" }
kotlinBom = { module = "org.jetbrains.kotlin:kotlin-bom", version.ref = "kotlinBom" }
activityCompose = { module = "androidx.activity:activity-compose", version.ref = "activityCompose" }
composeBom = { module = "androidx.compose:compose-bom", version.ref = "composeBom" }
play-services-tflite-gpu = { module = "com.google.android.gms:play-services-tflite-gpu", version.ref = "playServicesTfliteGpu" }
tensorflow-lite = { module = "org.tensorflow:tensorflow-lite", version.ref = "tensorflowLite" }
tensorflow-lite-gpu = { module = "org.tensorflow:tensorflow-lite-gpu", version.ref = "tensorflowLiteGpu" }
tensorflow-lite-gpu-delegate-plugin = { module = "org.tensorflow:tensorflow-lite-gpu-delegate-plugin", version.ref = "tensorflowLiteTaskVision" }
tensorflow-lite-task-vision = { module = "org.tensorflow:tensorflow-lite-task-vision", version.ref = "tensorflowLiteTaskVision" }
tensorflow-lite-task-vision-play-services = { module = "org.tensorflow:tensorflow-lite-task-vision-play-services", version.ref = "tensorflowLiteTaskVisionPlayServices" }
ui = { module = "androidx.compose.ui:ui" }
uiGraphics = { module = "androidx.compose.ui:ui-graphics" }
uiToolingPreview = { module = "androidx.compose.ui:ui-tooling-preview" }
material3 = { module = "androidx.compose.material3:material3" }
jUnit-extend = { module = "junit:junit", version.ref = "jUnit" }
junitExt = { module = "androidx.test.ext:junit", version.ref = "junitExt" }
espresso = { module = "androidx.test.espresso:espresso-core", version.ref = "espresso" }
mockk = { module = "io.mockk:mockk", version.ref = "mockK" }
mockkAndroid = { module = "io.mockk:mockk-android", version.ref = "mockK" }
composeUiTooling = { module = "androidx.compose.ui:ui-tooling" }
composeUiTestManifest = { module = "androidx.compose.ui:ui-test-manifest" }
firebaseAuth = { module = "com.google.firebase:firebase-auth", version.ref = "firebaseAuth" }
firebaseBom = { module = "com.google.firebase:firebase-bom", version.ref = "firebaseBom" }
firebaseAnalytics = { module = "com.google.firebase:firebase-analytics-ktx" }
retrofit = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit" }
retrofitGson = { module = "com.squareup.retrofit2:converter-gson", version.ref = "converterGson" }
retrofitLoggingInterceptor = { module = "com.squareup.okhttp3:logging-interceptor", version.ref = "loggingInterceptor" }
kotlinXCoroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "kotlinXCoroutines" }
lifeCycle = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "lifecycle" }
lifeCycleViewModel = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "lifecycle" }
lifeCycleLiveData = { module = "androidx.lifecycle:lifecycle-livedata-ktx", version.ref = "lifecycle" }
glide = { module = "com.github.bumptech.glide:glide", version.ref = "glide" }
glideCompiler = { module = "com.github.bumptech.glide:compiler", version.ref = "glide" }
navigationCompose = { module = "androidx.navigation:navigation-compose", version.ref = "navigation" }
daggerHilt = { module = "com.google.dagger:hilt-android", version.ref = "daggerHilt" }
daggerHiltCompiler = { module = "com.google.dagger:hilt-android-compiler", version.ref = "daggerHilt" }
daggerHiltTesting = { module = "com.google.dagger:hilt-android-testing", version.ref = "daggerHilt" }
hiltNavigationCompose = { module = "androidx.hilt:hilt-navigation-compose", version.ref = "navigationHilt" }

camerax_core = {module = "androidx.camera:camera-core" , version.ref = "camerax_version" }
camera-camera2 = {module = "androidx.camera:camera-camera2" , version.ref = "camerax_version" }
camera-lifecycle = {module = "androidx.camera:camera-lifecycle",version.ref = "camerax_version"}
camera-video = {module = "androidx.camera:camera-video",version.ref = "camerax_version"}
camera-view = {module = "androidx.camera:camera-view",version.ref = "camerax_version"}
camera-mlkit-vision = {module = "androidx.camera:camera-mlkit-vision",version.ref = "camerax_version"}
camera-extensions = {module = "androidx.camera:camera-extensions",version.ref = "camerax_version"}
object-detection-common = { group = "com.google.mlkit", name = "object-detection-common", version = "18.0.0" }
gms-play-services-tflite-gpu = { group = "com.google.android.gms", name = "play-services-tflite-gpu", version = "17.0.0" }


[plugins]
com-android-application = { id = "com.android.application", version.ref = "androidApplication" }
android-library = { id = "com.android.library", version.ref = "androidApplication" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlinAndroid" }
navigation-safeargs = { id = "androidx.navigation.safeargs.kotlin", version.ref = "navigation" }
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlinJvm" }
dagger-hilt = { id = "com.google.dagger.hilt.android", version.ref = "daggerHilt" }
google-services = { id = "com.google.gms.google-services", version.ref = "googleServices" }



